# Renders a 2D model into a PPM image

import sys
import numpy as np
import math

# ---------- Configuration types and constants ----------

IMAGE_DTYPE = np.uint8
COORD_DTYPE = np.int64
MODEL_DTYPE = np.float64

MAX_SIZE = 1024
MAX_VAL = 255
MAX_LINE_LEN = 10240-1 # 10240 characters minus the \0 terminator
DEFAULT_BACKGROUND = 255
CHANNELS_N = 3
DEFAULT_COLOR = (0, 0, 0,)

# ---------- Output routines ----------

def put_string(output, output_file):
    output = output.encode('ascii') if isinstance(output, str) else output
    written_n = output_file.write(output)
    if written_n != len(output):
        print('error writing to output stream', file=sys.stderr)
        sys.exit(1)

def save_ppm(image, output_file):
    # Defines image header
    magic_number_1 = 'P'
    magic_number_2 = '6'
    width  = image.shape[1]
    height = image.shape[0]
    end_of_header = '\n'

    # Writes header
    put_string(magic_number_1, output_file)
    put_string(magic_number_2, output_file)
    put_string('\n', output_file)
    put_string('%d %d\n' % (width, height), output_file)
    put_string('%d' % MAX_VAL, output_file)
    put_string(end_of_header, output_file)

    # Outputs image
    put_string(image.tobytes(), output_file)

# ---------- Drawing/model routines ----------

def rounding(pixel):
    # COMMENT: a implementação desta função me pareceu excessivamente verbosa. Qual a diferença dela para simplesmente usar math.round() ou np.rint()
    #Round the two first values of a 3D vector
    if len(pixel) != 3:
        print("There is a problem with the pixel to be rounded, it's not a 3D pixel")
        sys.exit(1)

    else:
        #Take the decimal part of the values of the pixel and round to lower integer
        #if it is <= 0.5 or else round to a upper number
        pixel[0] = math.floor(pixel[0]) if pixel[0]-math.trunc(pixel[0]) <= 0.5 else math.ceil(pixel[0])

        pixel[1] = math.floor(pixel[1]) if pixel[1]-math.trunc(pixel[1]) <= 0.5 else math.ceil(pixel[1])

def draw_line(image, x0, y0, x1, y1, color):
    h, w = image.shape[0],image.shape[1]
    #First, aply the transformers in the inputed points
    #Aply the standart matrix in the points
    p0 = SM.dot([x0,y0,1])
    p1 = SM.dot([x1,y1,1])
    #Aplying, if z != 1, the homogeneous transformers
    p0 = (1/p0[2])*p0 if p0[2] != 1 else p0
    p1 = (1/p1[2])*p1 if p1[2] != 1 else p1
    #Rounding the result to integer
    rounding(p0)
    rounding(p1)
    #Define the two new poits initial and final to draw the line
    x0,y0 = int(p0[0]),int(p0[1])
    x1,y1 = int(p1[0]),int(p1[1])
    # Computes differences
    dx = x1-x0
    dy = y1-y0
    dc = abs(dx) # delta x in book - here we are using row, col coordinates
    dr = abs(dy) # delta y in book
    x,y = x0,y0 #starting the points to be calculate and draw
    if dr <= dc:
        # Line inclination is at most 1
        d_horizontal = 2*dr      # delta east in book
        d_diagonal   = 2*(dr-dc) # delta northeast in book
        # ...draws line
        #Define the direction of the steps by the relative position of the final point
        step_row = 1 if y1>=y0 else -1
        step_col = 1 if x1>=x0 else -1
        s0, s1 = min(x0,x1), max(x0,x1) #Define the limits of the 'for'
        d = 2*dr - dc # starting D value, D_init in book
        for c in range(s0,s1+1):
            #Verify if the pixels are in the bound of the image
            try:
                #Tranform the point by the correspondent pixel and draw it
                image[h-1-y,x] = color
            except Exception:
                print(f'The input {x},{y} from ({x0},{y0}) to ({x1},{y1}) is a pixel out of the defined scale', file=sys.stderr)
                sys.exit(1)

            #Define the x and y for the next point
            if d<=0:
                d += d_horizontal
                x += step_col
            else:
                d += d_diagonal
                y += step_row
                x += step_col
    else:
        # Line inclination is greater than one -- inverts the roles of row and column
        d_vertical = 2*dc
        d_diagonal = 2*(dc-dr)
        #...draws lines
        #Define the direction of the steps by the relative position of the final point
        step_col = 1 if x1>=x0 else -1
        step_row = 1 if y1>=y0 else -1
        s0, s1 = min(y0,y1), max(y0,y1) #Define the limits of the 'for'
        d = 2*dc - dr # starting D value, D_init in book
        for r in range(s0,s1+1):
            #Verify if the pixels are in the bound of the image
            try:
                #Tranform the point by the correspondent pixel and draw it
                image[h-1-y,x] = color
            except Exception:
                print(f'The input {x},{y} from ({x0},{y0}) to ({x1},{y1}) is a pixel out of the defined scale', file=sys.stderr)
                sys.exit(1)

            #Define the x and y for the next point
            if (d<=0):
                d += d_vertical
                y += step_row
            else:
                d += d_diagonal
                y += step_row
                x += step_col

def verify_values(input,expect):
    #verify whether the amount of values inputed are the expected
    if input == expect:
        return True
    else:
        print(f'line {line_n}: command {command} expected {expect} values but got {input}!',
            file=sys.stderr)
        sys.exit(1)

def make_matrix(info_line):
    #Make sure there are nine numbers to make the matrix
    if verify_values(len(info_line),9):
        #Make the list info_line into a 3x3 matrix
        matrix,k = np.zeros((3,3)),0   # COMMENT: seria melhor fazer essa atribuição em duas linhas separadas (uma para matrix, uma para k)
        for i in range(0,3):
            for j in range(0,3):
                matrix[i][j] = info_line[k+j]
            k += 3
    return matrix

# ---------- Main routine ----------

# Parses and checks command-line arguments
if len(sys.argv)!=3:
    print("usage: python draw_2d_model.py <input.dat> <output.ppm>\n"
          "       interprets the drawing instructions in the input file and renders\n"
          "       the output in the NETPBM PPM format into output.ppm")
    sys.exit(1)

input_file_name  = sys.argv[1]
output_file_name = sys.argv[2]

# Reads input file and parses its header
with open(input_file_name, 'rt', encoding='utf-8') as input_file:
    input_lines = input_file.readlines()

if input_lines[0] != 'EA979V3\n':
    print(f'input file format not recognized!', file=sys.stderr)
    sys.exit(1)

dimensions = input_lines[1].split()
width = int(dimensions[0])
height = int(dimensions[1])

if width<=0 or width>MAX_SIZE or height<=0 or height>MAX_SIZE:
    print(f'input file has invalid image dimensions: must be >0 and <={MAX_SIZE}!', file=sys.stderr)
    sys.exit(1)

# Creates image
image = np.full((height, width, CHANNELS_N), fill_value=DEFAULT_BACKGROUND, dtype=IMAGE_DTYPE)

#Standart Matrix(SM) that is aplied every object to be draw
SM = np.array([[1,0,0],[0,1,0],[0,0,1]], dtype = float) # COMMENT: seria melhor dar um nome por extenso para essa variável, pois SM é críptico: exige um comentário para ser entendido
color = DEFAULT_COLOR

# Main loop - interprets and renders drawing commands
for line_n,line in enumerate(input_lines[2:], start=3):

    if len(line)>MAX_LINE_LEN:
        print(f'line {line_n}: line too long!', file=sys.stderr)
        sys.exit(1)

    if not line.strip():
        # Blank line - skips
        continue

    #Define the command of the line
    command = line[0]

    #Every elif has a verifation for the number of values inputed by the function 'verify_values'
    #The matrix hasn't this verification becausa that is done in function 'makematrix'
    if command == 'c':
        # Clears with new background color
        values = [int(x) for x in line[1:].split()]

        if verify_values(len(values),3):
            background_color = np.array(values, dtype=IMAGE_DTYPE)
            image[...] = background_color

    elif command == 'C':
        #Change the color of the pincel
        values = [int(x) for x in line[1:].split()]

        if verify_values(len(values),3):
            color = np.array(values, dtype=IMAGE_DTYPE)

    elif command == 'L':
        #Draw a line between two determinates points
        values = [int(x) for x in line[1:].split()]

        if verify_values(len(values),4):
            draw_line(image,values[0],values[1],values[2],values[3],color)

    elif command == 'P':
        #Draw an open polyline with n points
        values = [int(x) for x in line[1:].split()]

        if verify_values(len(values),2*values[0]+1):
            for i in range(1, 2*(values[0]-1),2):
                draw_line(image,values[i],values[i+1],values[i+2],values[i+3],color)

    elif command == 'R':
        #Draw a polygon with determineded n points
        values = [int(x) for x in line[1:].split()]

        if verify_values(len(values),2*values[0]+1):
            for i in range(1, 2*(values[0]-1),2):
                draw_line(image,values[i],values[i+1],values[i+2],values[i+3],color)

            draw_line(image,values[2*values[0]-1],values[2*values[0]],values[1],values[2],color)

    elif command == 'M':
        #Change SM that aplies every object to be drawned by the M matrix
        values = [float(x) for x in line[1:].split()]
        SM = make_matrix(values)

    elif command == 'm':
        #Change SM that aplies every object to be drawned by SM *= m
        values = [float(x) for x in line[1:].split()]
        SM = SM.dot(make_matrix(values))

    elif command == '#':
        #Line with comment
        continue

    else:
        print(f'line {line_n}: unrecognized command "{command}"!', file=sys.stderr)
        sys.exit(1)

# If we reached this point, everything went well - outputs rendered image file
with open(output_file_name, 'wb') as output_file:
    save_ppm(image, output_file)
